name: üéØ BDD Test Automation - Playwright MCP Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test Suite to Run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - auth
        - inventory
        - cart
        - all
      browser_mode:
        description: 'Browser Mode'
        required: true
        default: 'headless'
        type: choice
        options:
        - headless
        - headed

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: üß™ Run BDD Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-suite: [smoke, auth, inventory, cart]
      fail-fast: false
    
    steps:
    - name: üìÇ Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üåê Install Playwright Browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: üîß Setup Test Environment
      run: |
        # Create reports directory
        mkdir -p reports
        mkdir -p screenshots
        
        # Set environment variables
        echo "HEADLESS=true" >> $GITHUB_ENV
        echo "MCP_MODE=simulation" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV

    - name: üß™ Run Smoke Tests
      if: matrix.test-suite == 'smoke' || github.event.inputs.test_suite == 'smoke'
      run: |
        python run_tests.py --smoke --headless
      continue-on-error: true

    - name: üîê Run Authentication Tests
      if: matrix.test-suite == 'auth' || github.event.inputs.test_suite == 'auth'
      run: |
        python run_tests.py --auth --headless
      continue-on-error: true

    - name: üì¶ Run Inventory Tests
      if: matrix.test-suite == 'inventory' || github.event.inputs.test_suite == 'inventory'
      run: |
        python run_tests.py --inventory --headless
      continue-on-error: true

    - name: üõí Run Cart Tests
      if: matrix.test-suite == 'cart' || github.event.inputs.test_suite == 'cart'
      run: |
        python run_tests.py --cart --headless
      continue-on-error: true

    - name: üéØ Run All Tests
      if: github.event.inputs.test_suite == 'all'
      run: |
        python run_tests.py --all --headless
      continue-on-error: true

    - name: üìä Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.test-suite }}
        path: |
          reports/
          screenshots/
        retention-days: 30

    - name: üìù Upload Test Results to GitHub
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 'Test Results - ${{ matrix.test-suite }}'
        path: 'reports/*junit.xml'
        reporter: java-junit
        fail-on-error: false

  deploy-reports:
    name: üìà Deploy Test Reports
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: üìÇ Checkout Repository
      uses: actions/checkout@v4

    - name: üì• Download All Test Reports
      uses: actions/download-artifact@v4
      with:
        path: ./all-reports

    - name: üèóÔ∏è Setup Pages
      uses: actions/configure-pages@v4

    - name: üìã Create Reports Index
      run: |
        mkdir -p public
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>BDD Test Automation Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background: #2196F3; color: white; padding: 20px; border-radius: 8px; }
                .report-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 20px; }
                .report-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; }
                .report-card h3 { margin-top: 0; color: #333; }
                .btn { display: inline-block; background: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; margin: 5px; }
                .btn:hover { background: #45a049; }
                .timestamp { color: #666; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üéØ BDD Test Automation Reports</h1>
                <p>Cucumber BDD Test Framework with Playwright MCP Integration</p>
                <p class="timestamp">Generated: $(date)</p>
            </div>
            
            <div class="report-grid">
                <div class="report-card">
                    <h3>üî• Smoke Tests</h3>
                    <p>Critical functionality validation</p>
                    <a href="./test-reports-smoke/" class="btn">View Reports</a>
                </div>
                
                <div class="report-card">
                    <h3>üîê Authentication Tests</h3>
                    <p>Login and security validation</p>
                    <a href="./test-reports-auth/" class="btn">View Reports</a>
                </div>
                
                <div class="report-card">
                    <h3>üì¶ Inventory Tests</h3>
                    <p>Product listing and management</p>
                    <a href="./test-reports-inventory/" class="btn">View Reports</a>
                </div>
                
                <div class="report-card">
                    <h3>üõí Cart Tests</h3>
                    <p>Shopping cart functionality</p>
                    <a href="./test-reports-cart/" class="btn">View Reports</a>
                </div>
            </div>
            
            <div style="margin-top: 40px; padding: 20px; background: #f5f5f5; border-radius: 8px;">
                <h3>üìä Test Metrics</h3>
                <p>‚Ä¢ Framework: Cucumber BDD with pytest-bdd</p>
                <p>‚Ä¢ Browser Automation: Playwright MCP Integration</p>
                <p>‚Ä¢ Architecture: Page Object Model</p>
                <p>‚Ä¢ CI/CD: GitHub Actions</p>
            </div>
        </body>
        </html>
        EOF
        
        # Copy all report artifacts
        cp -r all-reports/* public/ 2>/dev/null || true

    - name: üì§ Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

    - name: üöÄ Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notification:
    name: üì¢ Send Notifications
    needs: [test, deploy-reports]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üìä Create Test Summary
      run: |
        echo "## üéØ BDD Test Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìà Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Framework**: Cucumber BDD + Playwright MCP" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: https://www.saucedemo.com/" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Useful Links" >> $GITHUB_STEP_SUMMARY
        echo "- [üìä Test Reports](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
        echo "- [üîç Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [üìÇ Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
