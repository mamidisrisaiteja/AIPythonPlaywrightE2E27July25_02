name: 🎮 Manual Test Execution

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test Suite to Execute'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - auth
        - inventory
        - cart
        - all
        - mcp-demo
      
      browser_mode:
        description: 'Browser Mode'
        required: true
        default: 'headless'
        type: choice
        options:
        - headless
        - headed
      
      mcp_mode:
        description: 'MCP Integration Mode'
        required: true
        default: 'simulation'
        type: choice
        options:
        - simulation
        - real
      
      environment:
        description: 'Test Environment'
        required: true
        default: 'saucedemo'
        type: choice
        options:
        - saucedemo
        - staging
        - production

jobs:
  manual-test:
    name: 🎯 Manual Test Execution
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🌐 Install Playwright
      run: |
        playwright install chromium
        playwright install-deps

    - name: 🔧 Configure Test Environment
      run: |
        mkdir -p reports screenshots
        echo "HEADLESS=${{ github.event.inputs.browser_mode == 'headless' }}" >> $GITHUB_ENV
        echo "MCP_MODE=${{ github.event.inputs.mcp_mode }}" >> $GITHUB_ENV
        echo "TEST_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV

    - name: 🎯 Execute Tests
      run: |
        case "${{ github.event.inputs.test_suite }}" in
          "smoke")
            python run_tests.py --smoke --${{ github.event.inputs.browser_mode }}
            ;;
          "auth")
            python run_tests.py --auth --${{ github.event.inputs.browser_mode }}
            ;;
          "inventory")
            python run_tests.py --inventory --${{ github.event.inputs.browser_mode }}
            ;;
          "cart")
            python run_tests.py --cart --${{ github.event.inputs.browser_mode }}
            ;;
          "all")
            python run_tests.py --all --${{ github.event.inputs.browser_mode }}
            ;;
          "mcp-demo")
            python run_tests.py --mcp-demo --${{ github.event.inputs.browser_mode }}
            ;;
        esac

    - name: 📊 Generate Test Summary
      if: always()
      run: |
        echo "## 🎯 Manual Test Execution Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: ${{ github.event.inputs.test_suite }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Browser Mode**: ${{ github.event.inputs.browser_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **MCP Mode**: ${{ github.event.inputs.mcp_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Executed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if reports exist and add details
        if [ -d "reports" ] && [ "$(ls -A reports)" ]; then
          echo "### 📈 Test Reports Generated" >> $GITHUB_STEP_SUMMARY
          ls -la reports/ >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📤 Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: manual-test-results-${{ github.event.inputs.test_suite }}-${{ github.run_number }}
        path: |
          reports/
          screenshots/
        retention-days: 7

    - name: 📋 Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Manual Test Failure - ${{ github.event.inputs.test_suite }}`,
            body: `## Test Execution Failed
            
            **Details:**
            - Test Suite: ${{ github.event.inputs.test_suite }}
            - Browser Mode: ${{ github.event.inputs.browser_mode }}
            - MCP Mode: ${{ github.event.inputs.mcp_mode }}
            - Environment: ${{ github.event.inputs.environment }}
            - Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Triggered by: @${{ github.actor }}
            
            Please check the workflow logs and test reports for more details.`,
            labels: ['bug', 'test-failure', 'automated']
          })
